var documenterSearchIndex = {"docs":
[{"location":"public_api/#Public-API-1","page":"Public API","title":"Public API","text":"","category":"section"},{"location":"public_api/#Models-1","page":"Public API","title":"Models","text":"","category":"section"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"Models in Slomo.jl are specified as new types whose attributes track the parameters of the model.","category":"page"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"For instance[1], we can make a new model representing an NFW halo as","category":"page"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"[1]: Pun intended","category":"page"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"halo = Slomo.Halos.NFWModel(25.3, 3.7e6)","category":"page"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"The NFWModel has two parameters, rs and rhos, representing the scale radius and scale density of the halo in units of kpc and solar masses per cubic kpc, respectively.  We can then query the enclosed mass of this model at a particular radius with the mass function, e.g.,","category":"page"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"mass_at_5kpc = mass(halo, 5)","category":"page"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"Models are immutable composite types (i.e. structs in the usual Julia syntax).  For those familiar with Python, these work like NamedTuples.","category":"page"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"While it isn't possible to change the value of a parameter in a Model, you can easily make a copy of the model with different parameters using the Slomo.Models.update function:","category":"page"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"denser_halo = update(halo, rhos=4e6)","category":"page"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"The Models module defines the basic functionality for working with DensityModels (a subtype of Models), including functions for evaluating the volume density, surface density, and enclosed mass profiles.  All subtypes of DensityModel should at least implement the density() method.  Most models implemented in Slomo already implement custom mass methods for computational convenience.","category":"page"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"Modules = [Slomo.Models]\nPrivate = false","category":"page"},{"location":"public_api/#Slomo.Models","page":"Public API","title":"Slomo.Models","text":"Basic model types and methods\n\n\n\n\n\n","category":"module"},{"location":"public_api/#Slomo.Models.density-Tuple{Slomo.Models.DensityModel,Any}","page":"Public API","title":"Slomo.Models.density","text":"density(model::DensityModel, r)\n\nLocal volume density at r.\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Models.density2d-Tuple{Slomo.Models.DensityModel,Any}","page":"Public API","title":"Slomo.Models.density2d","text":"density2d(model::DensityModel, R)\n\nLocal surface density at R.  If not defined for a subtype of DensityModel, then calculate numerically as the Abel transform from the volume density profile.\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Models.mass-Tuple{Slomo.Models.DensityModel,Any}","page":"Public API","title":"Slomo.Models.mass","text":"mass(model::DensityModel, r)\n\nEnclosed mass within r.  If not defined for a subtype of DensityModel, then calculate  numerically as the integral of the volume density.\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Models.update-Tuple{Slomo.Models.Model}","page":"Public API","title":"Slomo.Models.update","text":"update(model)\n\nCreate a new model from the specified parameters.\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Anisotropy-1","page":"Public API","title":"Anisotropy","text":"","category":"section"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"Modules = [Slomo.Anisotropy]\nPrivate = false","category":"page"},{"location":"public_api/#Slomo.Anisotropy","page":"Public API","title":"Slomo.Anisotropy","text":"Collection of anisotropy models.\n\nIsotropicModel: isotropic model\nConstantBetaModel: constant beta model\nRSBetaModel: flexible beta model from Read & Steger\nbeta: orbital anisotropy profile\n\n\n\n\n\n","category":"module"},{"location":"public_api/#Slomo.Anisotropy.ConstantBetaModel","page":"Public API","title":"Slomo.Anisotropy.ConstantBetaModel","text":"ConstantBetaModel(beta)\n\nModel that assumes beta is constant with galactocentric radius.\n\n\n\n\n\n","category":"type"},{"location":"public_api/#Slomo.Anisotropy.IsotropicModel","page":"Public API","title":"Slomo.Anisotropy.IsotropicModel","text":"IsotropicModel()\n\nParameter-less model representing an isotropic system (i.e. beta = 0).\n\n\n\n\n\n","category":"type"},{"location":"public_api/#Slomo.Anisotropy.RSBetaModel","page":"Public API","title":"Slomo.Anisotropy.RSBetaModel","text":"RSBetaModel(beta0, betaInf, rbeta, nbeta)\n\nFlexible velocity anisotropy model from Read & Steger 2017 (eq. 9)\n\nbeta(r) = beta_0 + (beta_infty - beta_0)  (1 + (r_beta  r))^n_beta\n\nbeta0: inner asymptotic anisotropy\nbetaInf: outer asymptotic anisotropy\nrbeta: transition radius\nnbeta: transition sharpness, higher is a faster transition\n\nbeta0, betaInf, nbeta = 0, 1, 2 corresponds to the Osipkov-Merritt profile\n\nbeta0, betaInf, nbeta = 0, 0.5, 1 corresponds to the Mamon-Lokas profile\n\n\n\n\n\n","category":"type"},{"location":"public_api/#Slomo.Anisotropy.beta-Tuple{Slomo.Anisotropy.AnisotropyModel,Any}","page":"Public API","title":"Slomo.Anisotropy.beta","text":"beta(model::AnisotropyModel, r)\n\nOrbital anisotropy as a function of radius.  The orbital anisotropy is defined as \n\nbeta = 1 - sigma_theta^2  sigma_r^2\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Tracers-1","page":"Public API","title":"Tracers","text":"","category":"section"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"Modules = [Slomo.Tracers]\nPrivate = false","category":"page"},{"location":"public_api/#Slomo.Tracers","page":"Public API","title":"Slomo.Tracers","text":"Collection of tracer density models.\n\nSersicModel : Representation of a Sersic surface density profile\n\n\n\n\n\n","category":"module"},{"location":"public_api/#Slomo.Tracers.SersicModel","page":"Public API","title":"Slomo.Tracers.SersicModel","text":"SersicModel(Re, n, Mtot)\n\nRepresentation of a Sersic surface density profile.\n\nRe: the effective radius in kpc.\nn: the Sersic index\nMtot: the total mass associated to the profile.\n\nFor the purposes of using the SersicModel to track the tracer population's density distribution, Mtot is somewhat arbitrary.  For using it as a component of the total mass profile, this should take units of solar masses.\n\n\n\n\n\n","category":"type"},{"location":"public_api/#Halos-1","page":"Public API","title":"Halos","text":"","category":"section"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"Modules = [Slomo.Halos]\nPrivate = false","category":"page"},{"location":"public_api/#Slomo.Halos","page":"Public API","title":"Slomo.Halos","text":"Dark matter halo models and relations.\n\nSignificant credit to Benedikt Diemer for developing Colossus.\n\nWhile much of this is inspired by Colossus; any implementation faults are my own.\n\nThe default halo mass definition is \"200c\", i.e. the virial radius of the halo is defined to be the radius that encloses a density that is 200 times the critical density of the universe.\n\nThe default cosmology (from Slomo.CosmologyTools) is currently set to the values from Planck 2018 (h = 0.6766, Neff = 3.046, OmegaM = 0.3111).\n\nCommon HaloModel methods\n\nscale_radius: scale radius of the halo\nvirial_radius: virial radius of the halo\nvirial_mass: virial mass of the halo\nconcentration: halo concentration (defined as rvir / rs)\n\nHaloModel subtypes\n\nNFWModel: Navarro, Frenk, and White (1997) profile\nCoreNFWModel: Core-NFW (Read et al. 2016) profile\nGNFWModel: generalized NFW model (i.e., αβγ where α = 1, β = 3)\nABGModel: α-β-γ profile (double power law)\nEinastoModel: Einasto (1965) profile\nSolNFWModel: Soliton + NFW model (Marsh & Pop 2015)\nSolABGModel: Soliton + αβγ model (Wasserman et al. 2019)\n\nHalo relations\n\nhmcr: halo mass-concentration relation from Dutton & Maccio (2014)\nshmr: stellar-halo mass relation from Rodriguez-Puebla et al. (2017)\nabg_from_logshm: αβγ scaling with log(Mstar / Mhalo) from DiCintio et al. (2014)\n\n\n\n\n\n","category":"module"},{"location":"public_api/#Slomo.Halos.ABGModel","page":"Public API","title":"Slomo.Halos.ABGModel","text":"ABGModel(rs, rhos, alpha, beta, gamma)\n\nαβγ double-power law density model.\n\nMerritt et al. 2006\n\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\nalpha: transition sharpness\nbeta: negative outer log slope\ngamma: negative inner log slope\n\n\n\n\n\n","category":"type"},{"location":"public_api/#Slomo.Halos.CoreNFWModel","page":"Public API","title":"Slomo.Halos.CoreNFWModel","text":"CoreNFWModel(rs, rhos, rc, nc)\n\ncoreNFW halo density model from Read et. al (2016)\n\nRead, Agertz, and Collins 2016\n\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\nrc: core radius in kpc\nnc: core index (0 -> no core, 1 -> full core)\n\n\n\n\n\n","category":"type"},{"location":"public_api/#Slomo.Halos.EinastoModel","page":"Public API","title":"Slomo.Halos.EinastoModel","text":"EinastoModel(rs, rhos, alpha)\n\nEinasto halo model\n\nEinasto 1965\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\nalpha: Einasto shape index, lower is more cored\n\n\n\n\n\n","category":"type"},{"location":"public_api/#Slomo.Halos.GNFWModel","page":"Public API","title":"Slomo.Halos.GNFWModel","text":"GNFWModel(rs, rhos, gamma)\n\nGeneralized NFW (gNFW) halo density model.  This is a specific instance of a generalized Hernquist (i.e. αβγ) model with the transition parameter α = 1, the outer slope β = 3, and  the inner slope, γ, left as a free parameter.\n\nHernquist 1990\nZhao 1996\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\ngamma: negative of inner density log slope\n\n\n\n\n\n","category":"type"},{"location":"public_api/#Slomo.Halos.NFWModel","page":"Public API","title":"Slomo.Halos.NFWModel","text":"NFWModel(rs, rhos)\n\nNFW halo density model.  Default constructor will make a halo with Mvir = 1e12 Msun.\n\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\n\n\n\n\n\n","category":"type"},{"location":"public_api/#Slomo.Halos.SolABGModel","page":"Public API","title":"Slomo.Halos.SolABGModel","text":"SolABGModel(rs, rhos, alpha, beta, gamma, rsol, rhosol, repsilon)\n\nSoliton + αβγ model.  For consistency, the αβγ density profile must match the  soliton density profile at repsilon.  If that is not the case, the constructor  will update repsilon.\n\nrs: NFW scale radius in kpc\nrhos: NFW scale density in Msun / kpc3\nalpha: transition sharpness\nbeta: negative outer log slope\ngamma: negative inner log slope\nrsol: soliton scale radius in kpc\nrhosol: soliton scale density in kpc\nrepsilon: transition radius\n\n\n\n\n\n","category":"type"},{"location":"public_api/#Slomo.Halos.SolNFWModel","page":"Public API","title":"Slomo.Halos.SolNFWModel","text":"SolNFWModel(rs, rhos, rsol, rhosol, repsilon)\n\nSoliton NFW model.  For consistency, the NFW density must match the soliton  density at repsilon.  If that is not the case, the constructor will update repsilon.\n\nMarsh & Pop 2015\nRobles, Bullock, and Boylan-Kolchin 2019\nrs: NFW scale radius in kpc\nrhos: NFW scale density in Msun / kpc3\nrsol: soliton scale radius in kpc\nrhosol: soliton scale density in kpc\nrepsilon: transition radius\n\n\n\n\n\n","category":"type"},{"location":"public_api/#Slomo.Halos.ABG_from_virial-NTuple{5,Any}","page":"Public API","title":"Slomo.Halos.ABG_from_virial","text":"ABG_from_virial(Mvir, cvir, alpha, beta, gamma; <keyword arguments>)\n\nConstruct a ABGModel halo from the virial mass, concentration, and shape parameters.\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.ABG_from_virial-Tuple{Any,Any,Any}","page":"Public API","title":"Slomo.Halos.ABG_from_virial","text":"ABG_from_virial(Mvir, cvir, Mstar; <keyword arguments>)\n\nConstruct a ABGModel halo from the virial mass, concentration, and stellar mass, using the scaling relations from DiCintio et al. 2014\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.CoreNFW_from_virial-NTuple{4,Any}","page":"Public API","title":"Slomo.Halos.CoreNFW_from_virial","text":"CoreNFW_from_virial(Mvir, cvir, Re, t_sf; <keyword arguments>)\n\nConstruct a CoreNFWModel from the scaling relations in Read et al. (2016).\n\nMvir: virial mass in Msun\ncvir: halo concentration\nRe: effective radius of stellar distribution, in kpc\nt_sf: time since start of star formation, in Gyr\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.Einasto_from_virial-Tuple{Any,Any,Any}","page":"Public API","title":"Slomo.Halos.Einasto_from_virial","text":"Einasto_from_virial(Mvir, cvir, alpha; <keyword arguments>)\n\nConstruct an Einasto halo from the halo mass, concentration, and shape parameter.\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.GNFW_from_virial-Tuple{Any,Any,Any}","page":"Public API","title":"Slomo.Halos.GNFW_from_virial","text":"GNFW_from_virial(Mvir, cvir, gamma; <keyword arguments>)\n\nConstruct a gNFW halo from the virial mass and concentration.\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.NFW_from_virial-Tuple{Any,Any}","page":"Public API","title":"Slomo.Halos.NFW_from_virial","text":"NFW_from_virial(Mvir, cvir; <keyword arguments>)\n\nConstruct an NFW halo from the virial mass and concentration.\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.SolABG_from_virial-NTuple{6,Any}","page":"Public API","title":"Slomo.Halos.SolABG_from_virial","text":"SolABG_from_virial(Mvir, cvir, alpha, beta, gamma, m22; <keyword arguments>)\n\nConstruct a Soliton + αβγ halo from the halo mass, concentration, shape parameters, and  axion mass.\n\nArguments\n\nrsol = nothing: for default, use the soliton size-halo mass scaling relationship\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\nxstart::Real = 10.0: factor of the scale radius to start the search for the root\nrtol::Real = 1e-2: relative error tolerance for the root finding\nmaxevals:Int = 100: maximum number of function evalutions for the root finding\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.SolNFW_from_virial-Tuple{Any,Any,Any}","page":"Public API","title":"Slomo.Halos.SolNFW_from_virial","text":"SolNFW_from_virial(Mvir, cvir, m22; <keyword arguments>)\n\nConstruct a Solition-NFW halo from the halo mass, concentration, and axion mass.\n\nArguments\n\nrsol = nothing: for default, use the soliton size-halo mass scaling relationship\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\nxstart::Real = 10.0: factor of the scale radius to start the search for the root\nrtol::Real = 1e-2: relative error tolerance for the root finding\nmaxevals:Int = 100: maximum number of function evalutions for the root finding\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.abg_from_logshm-Tuple{Any}","page":"Public API","title":"Slomo.Halos.abg_from_logshm","text":"abg_from_logshm(logshm)\n\nαβγ scalings with log10(Mstar / Mhalo) from DiCintio+2014a.\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.concentration-Tuple{Slomo.Halos.HaloModel}","page":"Public API","title":"Slomo.Halos.concentration","text":"concentration(halo::HaloModel; <keyword arguments>)\n\nCompute the halo concentration.\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\nxstart::Real = 10.0: factor of the scale radius to start the search for the root\nrtol::Real = 1e-2: relative error tolerance for the root finding\nmaxevals:Int = 100: maximum number of function evalutions for the root finding\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.hmcr-Tuple{Any}","page":"Public API","title":"Slomo.Halos.hmcr","text":"hmcr(Mvir; <keyword arguments>)\n\nCompute the expected halo concentration from halo mass using the relation of  Dutton & Maccio 2014 (equations 7, 10-13).\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.hmcr_prior-Tuple{Any,Any}","page":"Public API","title":"Slomo.Halos.hmcr_prior","text":"hmcr_prior(Mvir, cvir; <keyword arguments>)\n\nCompute the probability of drawing a halo with virial parameters (Mvir, cvir), using the halo mass-concentration relation of Dutton & Maccio 2014.\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\nsigma_logc::Real = 0.16: scatter in log_concentration at fixed Mvir (in dex)\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.scale_radius-Tuple{Slomo.Halos.HaloModel}","page":"Public API","title":"Slomo.Halos.scale_radius","text":"scale_radius(halo::HaloModel)\n\nReturn the scale radius of the halo.  The convention adopted here is that the scale radius occurs where the logarithmic slope of the halo density profile is equal to -2.  For the  standard NFW model this is equal to rs, but other halo models may compute some other value to stay consistent with this convention (e.g., the ABGModel).\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.shmr-Tuple{Any}","page":"Public API","title":"Slomo.Halos.shmr","text":"shmr(Mvir; <keyword arguments>)\n\nCompute the expected stellar mass from halo mass using the relation of  Rodriguez-Puebla et al. 2017.\n\nSee equations 25-33 for the functional form and 49 - 55 for the parameters.\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.shmr_prior-Tuple{Any,Any}","page":"Public API","title":"Slomo.Halos.shmr_prior","text":"shmr_prior(Mvir, Mstar; <keyword arguments>)\n\nCompute the probability of drawing a halo mass and stellar mass pair (Mvir, Mstar).\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\nsigma_logMstar::Real = 0.15 scatter in log_Mstar (in dex)\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.virial_mass-Tuple{Real}","page":"Public API","title":"Slomo.Halos.virial_mass","text":"virial_mass(Rvir::Real; <keyword arguments>)\n\nCompute the virial mass from the virial radius.\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.virial_mass-Tuple{Slomo.Halos.HaloModel}","page":"Public API","title":"Slomo.Halos.virial_mass","text":"virial_mass(halo::HaloModel; <keyword arguments>)\n\nCompute the virial mass via root finding.\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\nxstart::Real = 10.0: factor of the scale radius to start the search for the root\nrtol::Real = 1e-2: relative error tolerance for the root finding\nmaxevals:Int = 100: maximum number of function evalutions for the root finding\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Halos.virial_radius-Tuple{Slomo.Halos.HaloModel}","page":"Public API","title":"Slomo.Halos.virial_radius","text":"virial_radius(halo::HaloModel, <keyword arguments>)\n\nCompute the virial radius of the halo via root finding.\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\nxstart::Real = 10.0: factor of the scale radius to start the search for the root\nrtol::Real = 1e-2: relative error tolerance for the root finding\nmaxevals:Int = 100: maximum number of function evalutions for the root finding\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Jeans-modeling-1","page":"Public API","title":"Jeans modeling","text":"","category":"section"},{"location":"public_api/#","page":"Public API","title":"Public API","text":"Modules = [Slomo.Jeans]\nPrivate = false","category":"page"},{"location":"public_api/#Slomo.Jeans","page":"Public API","title":"Slomo.Jeans","text":"Jeans model with line-of-sight velocity dispersion predictions.\n\nJeansModel: collection of mass model, tracer density model, and anisotropy model\nsigma_los: calculate the line-of-sight velocity dispersion\nkappa_los: calculate the line-of-sight velocity kurtosis\n\n\n\n\n\n","category":"module"},{"location":"public_api/#Slomo.Jeans.JeansModel","page":"Public API","title":"Slomo.Jeans.JeansModel","text":"JeansModel(mass_model, tracer_model, anisotropy_model)\n\nRepresents the key ingredients for the Jeans modeling.  The first argument can be an array of DensityModel instances, in which case we will consider the mass model to be the sum of all its components.  The second argument refers to the density profile of the kinematic  tracer population (e.g., the stars or star clusters).\n\n\n\n\n\n","category":"type"},{"location":"public_api/#Slomo.Jeans.kappa_los-Tuple{JeansModel,Any}","page":"Public API","title":"Slomo.Jeans.kappa_los","text":"kappa_los(model::JeansModel, R; <keyword arguments>, parameters...)\n\nCalculate the line-of-sight velocity kurtosis by numerically integrating the  spherical Jeans equations.\n\nExamples\n\nmodel = JeansModel(NFWModel(), SersicModel(), ConstantBetaModel())\nR = collect(1:0.5:10)\nkappa = kappa_los(model, R)\n\nArguments\n\nn_interp::Int = 10: number of points on the interpolation grid\nfudge::Real = 1e-6: fudge factor for tweaking integration bounds\ninterp::Bool = true: whether or not to interpolate from a grid of R\nreturn_sigma::Bool = false: whether or not to additionally return the velocity dispersion\nrmax::Real = 1e2: maximum radius (in kpc) for integrating the Jeans equation\nparameters: keywords used to update JeansModel parameter values\n\nwarning: Warning\nThis is only valid for the ConstantBetaModel anisotropy model.  Using some other anisotropy model will give nonsense results.\n\nSee also: sigma_los\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Jeans.sigma_los-Tuple{JeansModel,Any}","page":"Public API","title":"Slomo.Jeans.sigma_los","text":"sigma_los(model::JeansModel, R; <keyword arguments>, parameters...)\n\nCalculate the line-of-sight velocity dispersion by numerically integrating the  spherical Jeans equation.\n\nExamples\n\nmodel = JeansModel(NFWModel(), SersicModel(), ConstantBetaModel())\nR = collect(1:0.5:10)\nsigma = sigma_los(model, R)\n\nArguments\n\nn_interp::Int = 10: number of points on the interpolation grid\nfudge::Real = 1e-6: fudge factor for tweaking integration bounds\ninterp::Bool = true: whether or not to interpolate from a grid of R\nrmax::Real = 1e2: maximum radius (in kpc) for integrating the Jeans equation\nparameters: keywords used to update JeansModel parameter values\n\nSee also: sigma_los_parallel, kappa_los\n\n\n\n\n\n","category":"method"},{"location":"public_api/#Slomo.Jeans.sigma_los_parallel-Tuple{JeansModel,Any,Any}","page":"Public API","title":"Slomo.Jeans.sigma_los_parallel","text":"sigma_los_parallel(model::JeansModel, R, parameter_sets; <keyword arguments>)\n\nCalculate the line-of-sight velocity dispersion by numerically integrating the  spherical Jeans equation in parallel for different sets of parameters.\n\nparameter_sets should be a list of dictionaries where each dictionary contains an update to the model parameters.\n\nExamples\n\nmodel = JeansModel(NFWModel(), SersicModel(), ConstantBetaModel())\nR = collect(1:0.5:10)\nbetas = collect(0.1:0.1:0.9)\nparameter_sets = [Dict(:beta => b) for b in betas]\nsigmas = sigma_los(model, R, parameter_sets)\n\nArguments\n\nn_interp::Int = 10: number of points on the interpolation grid\nfudge::Real = 1e-6: fudge factor for tweaking integration bounds\ninterp::Bool = true: whether or not to interpolate from a grid of R\nrmax::Real = 1e2: maximum radius (in kpc) for integrating the Jeans equation\n\nSee also: sigma_los\n\n\n\n\n\n","category":"method"},{"location":"examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"start/#Getting-started-1","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"start/#","page":"Getting started","title":"Getting started","text":"using Slomo\nmass_model = Halos.NFWModel()\ntracer_model = SersicModel()\nanisotropy_model = ConstantBetaModel()\njean_model = JeansModel(mass_model, tracer_model, anisotropy_model)","category":"page"},{"location":"install/#Installing-Slomo-1","page":"Installation","title":"Installing Slomo","text":"","category":"section"},{"location":"install/#","page":"Installation","title":"Installation","text":"Install Julia (>= 1.3) from the Julia website.","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"Download the repository from GitHub","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"git clone https://github.com/adwasser/Slomo.jl.git","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"Activate the package and download any dependencies from within Julia","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"From the shell:","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"cd Slomo.jl\njulia","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"From the Julia REPL:","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"julia> using Pkg\njulia> Pkg.activate(\".\")\njulia> Pkg.instantiate()\njulia> Pkg.resolve()","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"Run the tests:","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"julia> using Pkg\njulia> Pkg.test(\"Slomo\")","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"(Optional) Build a system image for faster load times.","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"This requires the PackageCompiler.jl package.","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"mkdir build\njulia build.jl","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"You can start Julia with the resulting system image by calling","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"julia -J /path/to/Slomo.jl/build/sys.so","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"where /path/to/Slomo.jl should be replaced by the relevant path to the Slomo installation directory.","category":"page"},{"location":"private_api/#Private-API-1","page":"Private API","title":"Private API","text":"","category":"section"},{"location":"private_api/#Models-1","page":"Private API","title":"Models","text":"","category":"section"},{"location":"private_api/#","page":"Private API","title":"Private API","text":"Modules = [Slomo.Models]\nPublic = false","category":"page"},{"location":"private_api/#Slomo.Models.has_analytic_profile-Tuple{Any,Slomo.Models.Model}","page":"Private API","title":"Slomo.Models.has_analytic_profile","text":"has_analytic_profile(f, model::Model)\n\nStupid hack to see if there is an analytic profile defined for a subtype or if it needs to be numerically integrated.\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Models.potential-Tuple{Slomo.Models.DensityModel,Any}","page":"Private API","title":"Slomo.Models.potential","text":"potential(model::DensityModel, r)\n\nGravitational potential at r.  Equal to the square of the circular velocity.  If not  defined for a subtype of DensityModel, then calculate from the enclosed mass.\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Anisotropy-1","page":"Private API","title":"Anisotropy","text":"","category":"section"},{"location":"private_api/#","page":"Private API","title":"Private API","text":"Modules = [Slomo.Anisotropy]\nPublic = false","category":"page"},{"location":"private_api/#Slomo.Anisotropy.K_jeans-Tuple{Slomo.Anisotropy.AnisotropyModel,Any,Any}","page":"Private API","title":"Slomo.Anisotropy.K_jeans","text":"K_jeans(model::AnisotropyModel, r, R)\n\nJeans projection kernel for an anisotropy model.\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Anisotropy.g_jeans-Tuple{Slomo.Anisotropy.AnisotropyModel,Any}","page":"Private API","title":"Slomo.Anisotropy.g_jeans","text":"g_jean(model::AnisotropyModel, r)\n\nIntegrating factor when solving for sigma_r^2\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Tracers-1","page":"Private API","title":"Tracers","text":"","category":"section"},{"location":"private_api/#","page":"Private API","title":"Private API","text":"Modules = [Slomo.Tracers]\nPublic = false","category":"page"},{"location":"private_api/#Slomo.Tracers.M_sersic-NTuple{4,Any}","page":"Private API","title":"Slomo.Tracers.M_sersic","text":"M_sersic(r, Re, n, Mtot)\n\nCompute the enclosed mass within deprojected radius for the Sersic model.\n\nr: deprojected (3d) radii in kpc\nRe: effective radius in kpc\nn: index\nMtot: total mass\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Tracers.b_cb-Tuple{Any}","page":"Private API","title":"Slomo.Tracers.b_cb","text":"b_cb(n)\n\nCompute the \"b\" parameter in the Sersic function, from the Ciotti & Bertin (1999)  approximation.  n is the Sersic index.\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Tracers.p_ln-Tuple{Any}","page":"Private API","title":"Slomo.Tracers.p_ln","text":"p_ln(n)\n\nCompute the \"p\" parameter in fitting deprojected Sersic function, from  Lima Neto et al. (1999).  n is the Sersic index\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Tracers.rho_sersic-NTuple{4,Any}","page":"Private API","title":"Slomo.Tracers.rho_sersic","text":"rho_sersic(r, Re, n, Mtot)\n\nCompute the volume density profile for Sersic model.\n\nr: deprojected (3d) radii in kpc\nRe: effective radius in kpc\nn: index\nMtot: total mass\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Tracers.s_sersic-NTuple{4,Any}","page":"Private API","title":"Slomo.Tracers.s_sersic","text":"s_sersic(R, Re, n, Mtot)\n\nCompute the surface density profile for Sersic model.\n\nR: projected (2d) radii in kpc\nRe: effective radius in kpc\nn: index\nMtot: total mass\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Halos-1","page":"Private API","title":"Halos","text":"","category":"section"},{"location":"private_api/#","page":"Private API","title":"Private API","text":"Modules = [Slomo.Halos]\nPublic = false","category":"page"},{"location":"private_api/#Slomo.Halos.M_ABG-NTuple{6,Any}","page":"Private API","title":"Slomo.Halos.M_ABG","text":"M_ABG(r, rs, rhos, alpha, beta, gamma)\n\nCompute the enclosed mass profile for an αβγ model.\n\nr: radii in kpc\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\nalpha: transition sharpness\nbeta: negative outer log slope\ngamma: negative inner log slope\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.M_Einasto-NTuple{4,Any}","page":"Private API","title":"Slomo.Halos.M_Einasto","text":"M_Einasto(r, rs, rhos, alpha)\n\nCompute the enclosed mass for Einasto model.\n\nr: radii in kpc\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\nalpha: Einasto shape index, lower is more cored\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.M_GNFW-NTuple{4,Any}","page":"Private API","title":"Slomo.Halos.M_GNFW","text":"M_GNFW(r, rs, rhos, gamma)\n\nCompute the enclosed mass for gNFW model.\n\nr: radii in kpc\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\ngamma: negative of inner density log slope\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.M_NFW-Tuple{Any,Any,Any}","page":"Private API","title":"Slomo.Halos.M_NFW","text":"M_NFW(r, rs, rhos)\n\nCompute the enclosed mass for NFW model.\n\nNavarro, Frenk, and White (1997)\n\nr: radii in kpc\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.M_sol-Tuple{Any,Any,Any}","page":"Private API","title":"Slomo.Halos.M_sol","text":"M_sol(r, rsol, rhosol)\n\nCompute the enclosed mass for the soliton model.  It's analytic!\n\nrsol: soliton scale radius in kpc\nrhosol: soliton scale density in kpc\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.Mvir_from_Rvir-Tuple{Any}","page":"Private API","title":"Slomo.Halos.Mvir_from_Rvir","text":"Mvir_from_Rvir(Rvir; <keyword arguments>)\n\nCompute the virial mass from the virial radius, using the definition\n\nM_mathrmvir = 4pi Deltarho  (3 R_mathrmvir^3)\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.Rvir_from_Mvir-Tuple{Any}","page":"Private API","title":"Slomo.Halos.Rvir_from_Mvir","text":"Rvir_from_Mvir(Mvir; <keyword arguments>)\n\nCompute the virial radius from the virial mass, using the definition\n\nM_mathrmvir = 4pi Deltarho  (3 R_mathrmvir^3)\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.alpha_peak-Tuple{Any}","page":"Private API","title":"Slomo.Halos.alpha_peak","text":"alpha_peak(Mvir; <keyword arguments>)\n\nCompute the Einasto shape parameter from peak height using the relation of Gao+2008.\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.alpha_peak_prior-Tuple{Any,Any}","page":"Private API","title":"Slomo.Halos.alpha_peak_prior","text":"alpha_peak_prior(Mvir, alpha; <keyword arguments>)\n\nCompute the probability of drawing a halo with the given virial mass and Einasto shape parameter using the alpha-peak height relation of Gao et al. 2008.\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\nsigma0::Real = 0.16: scatter (in dex) of Mvir at redshift z = 0\nsigmaz::Real = 0.03: slope with redshift in scatter (in dex) of Mvir \n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.drhodr_ABG-NTuple{6,Any}","page":"Private API","title":"Slomo.Halos.drhodr_ABG","text":"drhodr_ABG(r, rs, rhos, alpha, beta, gamma)\n\nCompute the linear density derivative for αβγ model.\n\nr: radii in kpc\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\nalpha: transition sharpness\nbeta: negative outer log slope\ngamma: negative inner log slope\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.drhodr_NFW-Tuple{Any,Any,Any}","page":"Private API","title":"Slomo.Halos.drhodr_NFW","text":"drhodr_NFW(r, rs, rhos)\n\nCompute the linear density derivative for NFW model.\n\nr: radii in kpc\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.drhodr_sol-Tuple{Any,Any,Any}","page":"Private API","title":"Slomo.Halos.drhodr_sol","text":"drhodr_sol(r, rsol, rhosol)\n\nCompute the linear density derivative for the soliton model.\n\nrsol: soliton scale radius in kpc\nrhosol: soliton scale density in kpc\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.m22_from_sol-Tuple{Any,Any}","page":"Private API","title":"Slomo.Halos.m22_from_sol","text":"m22_from_sol(rsol, rhosol; <keyword arguments>)\n\nCalculate the axion mass from the soliton scale parameters. See Marsh & Pop 2015,  equation 8.  Axion mass has units of 1e-22 eV.  \n\nrsol: soliton scale radius in kpc\nrhosol: soliton scale density in kpc\n\nArguments\n\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\nalpha_mp::Real = 0.23: the alpha fitting parameter from Marsh & Pop 2015\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.matching_radius-NTuple{4,Any}","page":"Private API","title":"Slomo.Halos.matching_radius","text":"matching_radius(rs, rhos, rsol, rhosol; <keyword arguments>)\n\nCompute the matching radius, repsilon, from the specified NFW and Sol parameters.\n\nArguments\n\nxstart::Real = 2.0: factor of the soliton radius to start the search for the root\nrtol::Real = 1e-9: relative error tolerance for the root finding\nmaxevals:Int = 100: maximum number of function evalutions for the root finding\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.peak_height-Tuple{Any}","page":"Private API","title":"Slomo.Halos.peak_height","text":"peak_height(Mvir; <keyword arguments>)\n\nComputes the dimensionless peak height,\n\nnu = delta_mathrmcrit(z)  sigma(M z)\n\nusing the approximation of Dutton & Maccio 2014 for a Planck 2013 cosmology.\n\nArguments\n\nmdef::AbstractString = default_mdef: halo mass definition (e.g., \"200c\", \"vir\")\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.rho_ABG-NTuple{6,Any}","page":"Private API","title":"Slomo.Halos.rho_ABG","text":"rho_ABG(r, rs, rhos, alpha, beta, gamma)\n\nCompute the local volume density for an αβγ model.\n\nr: radii in kpc\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\nalpha: transition sharpness\nbeta: negative outer log slope\ngamma: negative inner log slope\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.rho_Einasto-NTuple{4,Any}","page":"Private API","title":"Slomo.Halos.rho_Einasto","text":"rho_Einasto(r, rs, rhos, alpha)\n\nCompute the local volume density for Einasto model.\n\nr: radii in kpc\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\nalpha: Einasto shape index, lower is more cored\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.rho_GNFW-NTuple{4,Any}","page":"Private API","title":"Slomo.Halos.rho_GNFW","text":"rho_GNFW(r, rs, rhos, gamma)\n\nCompute the local volume density for NFW model.\n\nr: radii in kpc\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\ngamma: negative of inner density log slope\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.rho_NFW-Tuple{Any,Any,Any}","page":"Private API","title":"Slomo.Halos.rho_NFW","text":"rho_nfw(r, rs, rhos)\n\nCompute the local volume density for NFW model.\n\nr: radii in kpc\nrs: scale radius in kpc\nrhos: scale density in Msun / kpc3\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.rho_sol-Tuple{Any,Any,Any}","page":"Private API","title":"Slomo.Halos.rho_sol","text":"rho_sol(r, rsol, rhosol)\n\nCompute the local volume density for the soliton model.\n\nrsol: soliton scale radius in kpc\nrhosol: soliton scale density in kpc\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.rhosol_from_rsol-Tuple{Any,Any}","page":"Private API","title":"Slomo.Halos.rhosol_from_rsol","text":"rhosol_from_rsol(m22, rsol; <keyword arguments>)\n\nCalculate the scale density of the soliton core from m22 and the scale radius.\n\nm22: ultralight axion mass in units of 1e-22 eV\nrsol: soliton scale radius in kpc\n\nArguments\n\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\nalpha_mp::Real = 0.23: the alpha fitting parameter from Marsh & Pop 2015\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.rsol_from_Mvir-Tuple{Any,Any}","page":"Private API","title":"Slomo.Halos.rsol_from_Mvir","text":"rsol_from_Mvir(m22, Mvir)\n\nCalculate the scale radius of the soliton core from the halo mass scaling relation  (see Robles+2019).\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Halos.Δρ_from_mdef-Tuple{Any}","page":"Private API","title":"Slomo.Halos.Δρ_from_mdef","text":"Δρ_from_mdef(mdef; <keyword arguments>)\n\nParse the halo mass definition to get the spherical overdensity in Msun / kpc3. If mdef is \"vir\", then use the spherical overdensity relation of Bryan & Norman 1998.\n\nmdef should be either \"vir\" or of the form \"[0-9]*[c|m]\" where \"c\" refers to a multiple of the critical density and \"m\" refers to a multiple of the mass density, e.g.,\n\nmdef in [\"vir\", \"200c\", \"500c\", \"200m\", \"500m\", ...]\n\nArguments\n\ncosmo::AbstractCosmology = default_cosmo: cosmology under which to evaluate the overdensity\nz::Real = 0.0: redshift at which to evaluate the overdensity\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Jeans-modeling-1","page":"Private API","title":"Jeans modeling","text":"","category":"section"},{"location":"private_api/#","page":"Private API","title":"Private API","text":"Modules = [Slomo.Jeans]\nPublic = false","category":"page"},{"location":"private_api/#Slomo.Jeans.integral_from_kernel-NTuple{4,Any}","page":"Private API","title":"Slomo.Jeans.integral_from_kernel","text":"integral_from_kernel(Rgrid, M, ρ, K; <keyword arguments>)\n\nCompute the outer Jeans integral for a model which has an analytic form for the Jeans projection kernel.\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Jeans.integral_from_vr2-NTuple{5,Any}","page":"Private API","title":"Slomo.Jeans.integral_from_vr2","text":"integral_from_vr2(Rgrid, M, ρ, K; <keyword arguments>)\n\nCompute the double Jeans integral for a model which has no analytic form for the Jeans projection kernel.\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Cosmology-1","page":"Private API","title":"Cosmology","text":"","category":"section"},{"location":"private_api/#","page":"Private API","title":"Private API","text":"Modules = [Slomo.CosmologyTools]","category":"page"},{"location":"private_api/#Slomo.CosmologyTools","page":"Private API","title":"Slomo.CosmologyTools","text":"Copy of Cosmology.jl to remove Unitful dependence.\n\nOriginal license:\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Mike Nolta <mike@nolta.net>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n","category":"module"},{"location":"private_api/#Slomo.CosmologyTools.Ωm-Tuple{Any}","page":"Private API","title":"Slomo.CosmologyTools.Ωm","text":"Compute the matter density of the universe at redshift z, in units of the critical density.\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.CosmologyTools.ρcrit-Tuple{Any}","page":"Private API","title":"Slomo.CosmologyTools.ρcrit","text":"Compute the critical density of the universe at redshift z, in Msun / kpc3\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.CosmologyTools.ρm-Tuple{Any}","page":"Private API","title":"Slomo.CosmologyTools.ρm","text":"Compute the mass density of the universe at redshift z, in Msun / kpc3 ρm(z) = Ωm(z) * ρcrit(z)\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.CosmologyTools.cosmology-Tuple{}","page":"Private API","title":"Slomo.CosmologyTools.cosmology","text":"cosmology(;h = 0.69,\n           Neff = 3.04,\n           OmegaK = 0,\n           OmegaM = 0.29,\n           OmegaR = nothing,\n           Tcmb = 2.7255,\n           w0 = -1,\n           wa = 0)\n\nParameters\n\nh - Dimensionless Hubble constant\nOmegaK - Curvature density (Ω_k)\nOmegaM - Matter density (Ω_m)\nOmegaR - Radiation density (Ω_r)\nTcmb - CMB temperature in Kelvin; used to compute Ω_γ\nNeff - Effective number of massless neutrino species; used to compute Ω_ν\nw0 - CPL dark energy equation of state; w = w0 + wa(1-a)\nwa - CPL dark energy equation of state; w = w0 + wa(1-a)\n\nExamples\n\njulia> c = cosmology()\nCosmology.FlatLCDM{Float64}(0.69, 0.7099122024007928, 0.29, 8.77975992071536e-5)\njulia> c = cosmology(OmegaK=0.1)\nCosmology.OpenLCDM{Float64}(0.69, 0.1, 0.6099122024007929, 0.29, 8.77975992071536e-5)\njulia> c = cosmology(w0=-0.9, OmegaK=-0.1)\nCosmology.ClosedWCDM{Float64}(0.69, -0.1, 0.8099122024007929, 0.29, 8.77975992071536e-5, -0.9, 0.0)\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Integrate-1","page":"Private API","title":"Integrate","text":"","category":"section"},{"location":"private_api/#","page":"Private API","title":"Private API","text":"Modules = [Slomo.Integrate]","category":"page"},{"location":"private_api/#Slomo.Integrate.integrate-Tuple{Any,Float64,Float64}","page":"Private API","title":"Slomo.Integrate.integrate","text":"Integrate f from lower bound a to upper bound b.\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Utils-1","page":"Private API","title":"Utils","text":"","category":"section"},{"location":"private_api/#","page":"Private API","title":"Private API","text":"Modules = [Slomo.Utils]","category":"page"},{"location":"private_api/#Slomo.Utils","page":"Private API","title":"Slomo.Utils","text":"Misplaced and miscellaneous functions\n\n\n\n\n\n","category":"module"},{"location":"private_api/#Slomo.Utils.B_inc-Tuple{Any,Any,Any}","page":"Private API","title":"Slomo.Utils.B_inc","text":"Redefined incomplete beta function in terms of hypergeometric function 2F1.\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Utils.gamma_inc-Tuple{Any,Any}","page":"Private API","title":"Slomo.Utils.gamma_inc","text":"Wrapper around regularized lower incomplete gamma function from Rmath\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Utils.hyp2f1-NTuple{4,Any}","page":"Private API","title":"Slomo.Utils.hyp2f1","text":"Wrapper around hypergeometric function 2F1\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Slomo.Utils.log_gauss-Tuple{Any,Any,Any}","page":"Private API","title":"Slomo.Utils.log_gauss","text":"Natural logarithm of a gaussian with mean μ and standard deviation σ.\n\n\n\n\n\n","category":"method"},{"location":"private_api/#Constants-1","page":"Private API","title":"Constants","text":"","category":"section"},{"location":"private_api/#","page":"Private API","title":"Private API","text":"Modules = [Slomo.Constants]","category":"page"},{"location":"private_api/#Slomo.Constants.G","page":"Private API","title":"Slomo.Constants.G","text":"Gravitational constant in Msun kpc (km / s)^2\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#Slomo.Constants.rad_per_arcsec","page":"Private API","title":"Slomo.Constants.rad_per_arcsec","text":"radians per arcsecond\n\n\n\n\n\n","category":"constant"},{"location":"private_api/#Slomo.Constants.rho_crit_h2","page":"Private API","title":"Slomo.Constants.rho_crit_h2","text":"Critical density in cosmologically-invariant units of Msun h^2 / kpc3\n\n\n\n\n\n","category":"constant"},{"location":"#Slomo.jl-Documentation-1","page":"Home","title":"Slomo.jl Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Slomo is a Julia package for modeling the dynamics of spherically symmetric stellar systems.","category":"page"},{"location":"#Contents-1","page":"Home","title":"Contents","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"install.md\", \"start.md\", \"examples.md\", \"public_api.md\", \"private_api.md\"]\nDepth = 1","category":"page"},{"location":"#Tutorial-1","page":"Home","title":"Tutorial","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Installing Slomo\nGetting started\nExamples","category":"page"},{"location":"#Index-1","page":"Home","title":"Index","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"}]
}
